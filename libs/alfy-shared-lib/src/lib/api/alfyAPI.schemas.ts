/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Alfy API
 * The Alfy API documentation
 * OpenAPI spec version: 1.0
 */
export interface BootstrapSysadminDto {
  /** Email for the sysadmin account */
  email: string;
  /**
   * Password for the sysadmin account
   * @minLength 8
   */
  password: string;
  /** First name of the sysadmin */
  firstName: string;
  /** Last name of the sysadmin */
  lastName: string;
}

/**
 * The actual data payload
 */
export type BaseResponseDtoData = { [key: string]: unknown };

export interface BaseResponseDto {
  /** Indicates if the request was successful */
  success: boolean;
  /** Optional message describing the result */
  message?: string;
  /** The actual data payload */
  data?: BaseResponseDtoData;
  /** Error message if request failed */
  error?: string;
}

export interface LoginDto {
  email: string;
  password: string;
}

export interface UserProfileDto {
  /** User ID */
  id: string;
  /** User email */
  email: string;
  /** User first name */
  firstName: string;
  /** User last name */
  lastName: string;
  /** User global role (only for sysadmin) */
  globalRole?: string;
  /** Whether the user has reset their temporary password */
  isPasswordReset: boolean;
  /** User creation date */
  createdAt: string;
  /** User last update date */
  updatedAt: string;
}

export interface AuthTokensDto {
  /** JWT access token */
  access_token: string;
  /** JWT refresh token */
  refresh_token: string;
  /** User profile information */
  user: UserProfileDto;
}

export interface AuthResponseDto {
  /** Indicates if the request was successful */
  success: boolean;
  /** Optional message describing the result */
  message?: string;
  /** The actual data payload */
  data?: AuthTokensDto;
  /** Error message if request failed */
  error?: string;
}

export interface RefreshTokenDto {
  refresh_token: string;
}

export interface LogoutMessageDto {
  /** Logout message */
  message: string;
}

export interface LogoutResponseDto {
  /** Indicates if the request was successful */
  success: boolean;
  /** Optional message describing the result */
  message?: string;
  /** The actual data payload */
  data?: LogoutMessageDto;
  /** Error message if request failed */
  error?: string;
}

export interface ChangePasswordDto {
  /** Current password (temporary or existing) */
  oldPassword: string;
  /**
   * New password - must contain uppercase, lowercase, number and special character
   * @minLength 8
   */
  newPassword: string;
}

export interface UserProfileResponseDto {
  /** Indicates if the request was successful */
  success: boolean;
  /** Optional message describing the result */
  message?: string;
  /** The actual data payload */
  data?: UserProfileDto;
  /** Error message if request failed */
  error?: string;
}

export interface AddFamilyMemberDto {
  /** The email of the user to add to the family */
  email: string;
}

/**
 * The sharing level for the resource
 */
export type UpdateSharingDtoSharingLevel =
  (typeof UpdateSharingDtoSharingLevel)[keyof typeof UpdateSharingDtoSharingLevel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSharingDtoSharingLevel = {
  private: 'private',
  family: 'family',
  selected_members: 'selected_members',
} as const;

export interface UpdateSharingDto {
  /** The sharing level for the resource */
  sharingLevel: UpdateSharingDtoSharingLevel;
  /** Array of user IDs to share with (only used when sharingLevel is selected_members) */
  sharedWithUsers?: string[];
}

export interface CreateFamilyDto {
  /**
   * The name of the family
   * @maxLength 100
   */
  name: string;
  /**
   * The description of the family
   * @maxLength 500
   */
  description?: string;
}

export interface UpdateFamilyDto {
  /**
   * The name of the family
   * @maxLength 100
   */
  name?: string;
  /**
   * The description of the family
   * @maxLength 500
   */
  description?: string;
}

export interface ChangeFamilyAdminDto {
  /** User ID of the new admin */
  newAdminId: string;
}

/**
 * Role for the new user
 */
export type CreateUserDtoRole =
  (typeof CreateUserDtoRole)[keyof typeof CreateUserDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserDtoRole = {
  admin: 'admin',
  user: 'user',
} as const;

/**
 * Whether to use existing family or create new one
 */
export type CreateUserDtoFamilyAction =
  (typeof CreateUserDtoFamilyAction)[keyof typeof CreateUserDtoFamilyAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserDtoFamilyAction = {
  existing: 'existing',
  new: 'new',
} as const;

export interface CreateUserDto {
  /** Email for the new user */
  email: string;
  /** First name of the user */
  firstName: string;
  /** Last name of the user */
  lastName: string;
  /** Role for the new user */
  role: CreateUserDtoRole;
  /** Whether to use existing family or create new one */
  familyAction: CreateUserDtoFamilyAction;
  /** Family ID if using existing family */
  familyId?: string;
  /** Family name if creating new family */
  familyName?: string;
  /** Family description if creating new family */
  familyDescription?: string;
}

export interface UpdateUserStatusDto {
  /** Whether the user should be active */
  isActive: boolean;
}

export interface CreateFamilyMemberDto {
  /** Email for the new family member */
  email: string;
  /** First name of the family member */
  firstName: string;
  /** Last name of the family member */
  lastName: string;
}

export interface UpdateFamilyMemberStatusDto {
  /** Whether the family member should be active */
  isActive: boolean;
}

/**
 * The unit of measurement for the item
 */
export type ShoppingListItemDTOUnit =
  (typeof ShoppingListItemDTOUnit)[keyof typeof ShoppingListItemDTOUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ShoppingListItemDTOUnit = {
  pz: 'pz',
  g: 'g',
  hg: 'hg',
  kg: 'kg',
  ml: 'ml',
  cl: 'cl',
  l: 'l',
} as const;

export interface ShoppingListItemDTO {
  /** The name of the shopping item */
  name: string;
  /** The quantity of the item */
  quantity: number;
  /** The unit of measurement for the item */
  unit: ShoppingListItemDTOUnit;
  /** Whether the item has been bought */
  bought: boolean;
}

export interface CreateShoppingListDTO {
  /** The name of the shopping list */
  name: string;
  /** The bought status of the shopping list */
  bought: boolean;
  /** The list of items in the shopping list */
  list: ShoppingListItemDTO[];
}

export interface ObjectId {
  [key: string]: unknown;
}

/**
 * The unit of measurement for the item
 */
export type ShoppingListItemEntityUnit =
  (typeof ShoppingListItemEntityUnit)[keyof typeof ShoppingListItemEntityUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ShoppingListItemEntityUnit = {
  pz: 'pz',
  g: 'g',
  hg: 'hg',
  kg: 'kg',
  ml: 'ml',
  cl: 'cl',
  l: 'l',
} as const;

export interface ShoppingListItemEntity {
  /** The unique identifier of the item */
  _id: string;
  /** The name of the shopping item */
  name: string;
  /** The quantity of the item */
  quantity: number;
  /** The unit of measurement for the item */
  unit: ShoppingListItemEntityUnit;
  /** Whether the item has been bought */
  bought: boolean;
}

export interface ShoppingList {
  /** The unique identifier of the shopping list */
  _id: ObjectId;
  /** The name of the shopping list */
  name: string;
  /** The ID of the user who created the shopping list */
  ownerId: ObjectId;
  /** The ID of the family this shopping list belongs to */
  familyId: ObjectId;
  /** Whether the shopping list is completed */
  bought: boolean;
  /** The list of items in the shopping list */
  list: ShoppingListItemEntity[];
  /** Creation timestamp */
  createdAt: string;
  /** Last update timestamp */
  updatedAt: string;
}

export interface ShoppingListResponseDto {
  /** Indicates if the request was successful */
  success: boolean;
  /** Optional message describing the result */
  message?: string;
  /** The actual data payload */
  data?: ShoppingList;
  /** Error message if request failed */
  error?: string;
}

export interface ShoppingListArrayResponseDto {
  /** Indicates if the request was successful */
  success: boolean;
  /** Optional message describing the result */
  message?: string;
  /** The actual data payload */
  data?: ShoppingList[];
  /** Error message if request failed */
  error?: string;
}

export interface UpdateShoppingListDto {
  /** The name of the shopping list */
  name?: string;
  /** The bought status of the shopping list */
  bought?: boolean;
  /** The list of items in the shopping list */
  list?: ShoppingListItemDTO[];
}

/**
 * The unit of measurement for the item
 */
export type UpdateShoppingListItemDtoUnit =
  (typeof UpdateShoppingListItemDtoUnit)[keyof typeof UpdateShoppingListItemDtoUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateShoppingListItemDtoUnit = {
  pz: 'pz',
  g: 'g',
  hg: 'hg',
  kg: 'kg',
  ml: 'ml',
  cl: 'cl',
  l: 'l',
} as const;

export interface UpdateShoppingListItemDto {
  /** The name of the shopping item */
  name?: string;
  /** The quantity of the item */
  quantity?: number;
  /** The unit of measurement for the item */
  unit?: UpdateShoppingListItemDtoUnit;
  /** Whether the item has been bought */
  bought?: boolean;
}

export interface DeleteResponseDto {
  /** Indicates if the request was successful */
  success: boolean;
  /** Optional message describing the result */
  message?: string;
  /**
   * The actual data payload
   * @nullable
   */
  data?: string;
  /** Error message if request failed */
  error?: string;
}

export type ShoppingListControllerCreateParams = {
  sharedWithUsers: string;
};
