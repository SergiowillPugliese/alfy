/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Alfy API
 * The Alfy API documentation
 * OpenAPI spec version: 1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  AddFamilyMemberDto,
  BaseResponseDto,
  UpdateSharingDto,
} from '../alfyAPI.schemas';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class FamilyManagementInternalService {
  constructor(private http: HttpClient) {}
  /**
   * @summary Get user families
   */
  familyControllerGetUserFamilies<TData = BaseResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  familyControllerGetUserFamilies<TData = BaseResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  familyControllerGetUserFamilies<TData = BaseResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  familyControllerGetUserFamilies<TData = BaseResponseDto>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/api/family/my-families`, options);
  }
  /**
   * @summary Get family members
   */
  familyControllerGetFamilyMembers<TData = BaseResponseDto>(
    familyId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  familyControllerGetFamilyMembers<TData = BaseResponseDto>(
    familyId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  familyControllerGetFamilyMembers<TData = BaseResponseDto>(
    familyId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  familyControllerGetFamilyMembers<TData = BaseResponseDto>(
    familyId: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/api/family/${familyId}/members`, options);
  }
  /**
   * @summary Add a member to the family
   */
  familyControllerAddFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    addFamilyMemberDto: AddFamilyMemberDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  familyControllerAddFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    addFamilyMemberDto: AddFamilyMemberDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  familyControllerAddFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    addFamilyMemberDto: AddFamilyMemberDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  familyControllerAddFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    addFamilyMemberDto: AddFamilyMemberDto,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/family/${familyId}/members`,
      addFamilyMemberDto,
      options
    );
  }
  /**
   * @summary Deactivate a family member
   */
  familyControllerDeactivateFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  familyControllerDeactivateFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  familyControllerDeactivateFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  familyControllerDeactivateFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.put<TData>(
      `/api/family/${familyId}/members/${userId}/deactivate`,
      undefined,
      options
    );
  }
  /**
   * @summary Activate a family member
   */
  familyControllerActivateFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  familyControllerActivateFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  familyControllerActivateFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  familyControllerActivateFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.put<TData>(
      `/api/family/${familyId}/members/${userId}/activate`,
      undefined,
      options
    );
  }
  /**
   * @summary Permanently delete a family member (sysadmin only)
   */
  familyControllerDeleteFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  familyControllerDeleteFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  familyControllerDeleteFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  familyControllerDeleteFamilyMember<TData = BaseResponseDto>(
    familyId: string,
    userId: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.delete<TData>(
      `/api/family/${familyId}/members/${userId}`,
      options
    );
  }
  /**
   * @summary Update resource sharing settings
   */
  familyControllerUpdateResourceSharing<TData = BaseResponseDto>(
    resourceType: string,
    resourceId: string,
    updateSharingDto: UpdateSharingDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  familyControllerUpdateResourceSharing<TData = BaseResponseDto>(
    resourceType: string,
    resourceId: string,
    updateSharingDto: UpdateSharingDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  familyControllerUpdateResourceSharing<TData = BaseResponseDto>(
    resourceType: string,
    resourceId: string,
    updateSharingDto: UpdateSharingDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  familyControllerUpdateResourceSharing<TData = BaseResponseDto>(
    resourceType: string,
    resourceId: string,
    updateSharingDto: UpdateSharingDto,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.put<TData>(
      `/api/family/resources/${resourceType}/${resourceId}/sharing`,
      updateSharingDto,
      options
    );
  }
  /**
   * @summary Get resource sharing settings
   */
  familyControllerGetResourceSharing<TData = BaseResponseDto>(
    resourceType: string,
    resourceId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  familyControllerGetResourceSharing<TData = BaseResponseDto>(
    resourceType: string,
    resourceId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  familyControllerGetResourceSharing<TData = BaseResponseDto>(
    resourceType: string,
    resourceId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  familyControllerGetResourceSharing<TData = BaseResponseDto>(
    resourceType: string,
    resourceId: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(
      `/api/family/resources/${resourceType}/${resourceId}/sharing`,
      options
    );
  }
}

export type FamilyControllerGetUserFamiliesClientResult =
  NonNullable<BaseResponseDto>;
export type FamilyControllerGetFamilyMembersClientResult =
  NonNullable<BaseResponseDto>;
export type FamilyControllerAddFamilyMemberClientResult =
  NonNullable<BaseResponseDto>;
export type FamilyControllerDeactivateFamilyMemberClientResult =
  NonNullable<BaseResponseDto>;
export type FamilyControllerActivateFamilyMemberClientResult =
  NonNullable<BaseResponseDto>;
export type FamilyControllerDeleteFamilyMemberClientResult =
  NonNullable<BaseResponseDto>;
export type FamilyControllerUpdateResourceSharingClientResult =
  NonNullable<BaseResponseDto>;
export type FamilyControllerGetResourceSharingClientResult =
  NonNullable<BaseResponseDto>;
