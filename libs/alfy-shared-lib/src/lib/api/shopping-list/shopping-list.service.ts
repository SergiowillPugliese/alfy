/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Alfy API
 * The Alfy API documentation
 * OpenAPI spec version: 1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  CreateShoppingListDTO,
  DeleteResponseDto,
  ShoppingListArrayResponseDto,
  ShoppingListResponseDto,
  UpdateShoppingListDto,
  UpdateShoppingListItemDto,
} from '../alfyAPI.schemas';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class ShoppingListService {
  constructor(private http: HttpClient) {}
  /**
   * @summary Create a new shopping list
   */
  shoppingListControllerCreate<TData = ShoppingListResponseDto>(
    createShoppingListDTO: CreateShoppingListDTO,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  shoppingListControllerCreate<TData = ShoppingListResponseDto>(
    createShoppingListDTO: CreateShoppingListDTO,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  shoppingListControllerCreate<TData = ShoppingListResponseDto>(
    createShoppingListDTO: CreateShoppingListDTO,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  shoppingListControllerCreate<TData = ShoppingListResponseDto>(
    createShoppingListDTO: CreateShoppingListDTO,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/shopping-list`,
      createShoppingListDTO,
      options
    );
  }
  /**
   * @summary Get all shopping lists
   */
  shoppingListControllerFindAll<TData = ShoppingListArrayResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  shoppingListControllerFindAll<TData = ShoppingListArrayResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  shoppingListControllerFindAll<TData = ShoppingListArrayResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  shoppingListControllerFindAll<TData = ShoppingListArrayResponseDto>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/api/shopping-list`, options);
  }
  /**
   * @summary Get a shopping list by id
   */
  shoppingListControllerFindOne<TData = ShoppingListResponseDto>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  shoppingListControllerFindOne<TData = ShoppingListResponseDto>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  shoppingListControllerFindOne<TData = ShoppingListResponseDto>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  shoppingListControllerFindOne<TData = ShoppingListResponseDto>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/api/shopping-list/${id}`, options);
  }
  /**
   * @summary Update a shopping list by id
   */
  shoppingListControllerUpdate<TData = ShoppingListResponseDto>(
    id: string,
    updateShoppingListDto: UpdateShoppingListDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  shoppingListControllerUpdate<TData = ShoppingListResponseDto>(
    id: string,
    updateShoppingListDto: UpdateShoppingListDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  shoppingListControllerUpdate<TData = ShoppingListResponseDto>(
    id: string,
    updateShoppingListDto: UpdateShoppingListDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  shoppingListControllerUpdate<TData = ShoppingListResponseDto>(
    id: string,
    updateShoppingListDto: UpdateShoppingListDto,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/shopping-list/${id}`,
      updateShoppingListDto,
      options
    );
  }
  /**
   * @summary Delete a shopping list by id
   */
  shoppingListControllerRemove<TData = DeleteResponseDto>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  shoppingListControllerRemove<TData = DeleteResponseDto>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  shoppingListControllerRemove<TData = DeleteResponseDto>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  shoppingListControllerRemove<TData = DeleteResponseDto>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.delete<TData>(`/api/shopping-list/${id}`, options);
  }
  /**
   * @summary Update a specific item in a shopping list
   */
  shoppingListControllerUpdateItem<TData = ShoppingListResponseDto>(
    id: string,
    itemId: string,
    updateShoppingListItemDto: UpdateShoppingListItemDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  shoppingListControllerUpdateItem<TData = ShoppingListResponseDto>(
    id: string,
    itemId: string,
    updateShoppingListItemDto: UpdateShoppingListItemDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  shoppingListControllerUpdateItem<TData = ShoppingListResponseDto>(
    id: string,
    itemId: string,
    updateShoppingListItemDto: UpdateShoppingListItemDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  shoppingListControllerUpdateItem<TData = ShoppingListResponseDto>(
    id: string,
    itemId: string,
    updateShoppingListItemDto: UpdateShoppingListItemDto,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/shopping-list/${id}/items/${itemId}`,
      updateShoppingListItemDto,
      options
    );
  }
  /**
   * @summary Delete a specific item in a shopping list
   */
  shoppingListControllerRemoveItem<TData = DeleteResponseDto>(
    id: string,
    itemId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  shoppingListControllerRemoveItem<TData = DeleteResponseDto>(
    id: string,
    itemId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  shoppingListControllerRemoveItem<TData = DeleteResponseDto>(
    id: string,
    itemId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  shoppingListControllerRemoveItem<TData = DeleteResponseDto>(
    id: string,
    itemId: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.delete<TData>(
      `/api/shopping-list/${id}/items/${itemId}`,
      options
    );
  }
}

export type ShoppingListControllerCreateClientResult =
  NonNullable<ShoppingListResponseDto>;
export type ShoppingListControllerFindAllClientResult =
  NonNullable<ShoppingListArrayResponseDto>;
export type ShoppingListControllerFindOneClientResult =
  NonNullable<ShoppingListResponseDto>;
export type ShoppingListControllerUpdateClientResult =
  NonNullable<ShoppingListResponseDto>;
export type ShoppingListControllerRemoveClientResult =
  NonNullable<DeleteResponseDto>;
export type ShoppingListControllerUpdateItemClientResult =
  NonNullable<ShoppingListResponseDto>;
export type ShoppingListControllerRemoveItemClientResult =
  NonNullable<DeleteResponseDto>;
