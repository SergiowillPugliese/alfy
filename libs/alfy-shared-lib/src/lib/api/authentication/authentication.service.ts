/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Alfy API
 * The Alfy API documentation
 * OpenAPI spec version: 1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  AuthResponseDto,
  LoginDto,
  LogoutResponseDto,
  RefreshTokenDto,
  RegisterDto,
  UserProfileResponseDto,
} from '../alfyAPI.schemas';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class AuthenticationService {
  constructor(private http: HttpClient) {}
  /**
   * @summary Register a new user
   */
  authControllerRegister<TData = AuthResponseDto>(
    registerDto: RegisterDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  authControllerRegister<TData = AuthResponseDto>(
    registerDto: RegisterDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  authControllerRegister<TData = AuthResponseDto>(
    registerDto: RegisterDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  authControllerRegister<TData = AuthResponseDto>(
    registerDto: RegisterDto,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(`/api/auth/register`, registerDto, options);
  }
  /**
   * @summary Login user
   */
  authControllerLogin<TData = AuthResponseDto>(
    loginDto: LoginDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  authControllerLogin<TData = AuthResponseDto>(
    loginDto: LoginDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  authControllerLogin<TData = AuthResponseDto>(
    loginDto: LoginDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  authControllerLogin<TData = AuthResponseDto>(
    loginDto: LoginDto,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(`/api/auth/login`, loginDto, options);
  }
  /**
   * @summary Refresh access token
   */
  authControllerRefreshTokens<TData = AuthResponseDto>(
    refreshTokenDto: RefreshTokenDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  authControllerRefreshTokens<TData = AuthResponseDto>(
    refreshTokenDto: RefreshTokenDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  authControllerRefreshTokens<TData = AuthResponseDto>(
    refreshTokenDto: RefreshTokenDto,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  authControllerRefreshTokens<TData = AuthResponseDto>(
    refreshTokenDto: RefreshTokenDto,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(`/api/auth/refresh`, refreshTokenDto, options);
  }
  /**
   * @summary Logout user
   */
  authControllerLogout<TData = LogoutResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  authControllerLogout<TData = LogoutResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  authControllerLogout<TData = LogoutResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  authControllerLogout<TData = LogoutResponseDto>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(`/api/auth/logout`, undefined, options);
  }
  /**
   * @summary Get current user profile
   */
  authControllerGetProfile<TData = UserProfileResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
  authControllerGetProfile<TData = UserProfileResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
  authControllerGetProfile<TData = UserProfileResponseDto>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;
  authControllerGetProfile<TData = UserProfileResponseDto>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/api/auth/profile`, options);
  }
}

export type AuthControllerRegisterClientResult = NonNullable<AuthResponseDto>;
export type AuthControllerLoginClientResult = NonNullable<AuthResponseDto>;
export type AuthControllerRefreshTokensClientResult =
  NonNullable<AuthResponseDto>;
export type AuthControllerLogoutClientResult = NonNullable<LogoutResponseDto>;
export type AuthControllerGetProfileClientResult =
  NonNullable<UserProfileResponseDto>;
